% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/SMITEreconstruction.R
\name{SMITE.recon}
\alias{SMITE.recon}
\title{SMITE Reconstruction}
\usage{
SMITE.recon(A, x, Amu, Asd, bmu, bsd)
}
\arguments{
\item{A}{The 'forward' coral variable matrix (t x p; time in rows, coral parameters in columns).}

\item{x}{A vector of SMITE model parameters (length p), ideally created from the SMITE.calib() function.}

\item{Amu}{A vector of length p giving the mean values of each coral variable in the calibration dataset.}

\item{Asd}{A vector of length p giving the standard deviations of each coral variable in the calibration dataset.}

\item{bmu}{A single-element atomic vector giving the mean of the reconstruction target in the calibration dataset.}

\item{bsd}{A single-element atomic vector giving the standard deviation of the reconstruction target in the calibration dataset.}
}
\value{
bhat - Predicted reconstruction target values. The SEP from the SMITE.calib() function can be used to estimate minimum errors (e.g., not associated with age model error).
}
\description{
Use a model (x) created by SMITE.calib() to estimate the reconstruction target (b) based on the 'forward' coral variable matrix (A).
}
\examples{
# Load data from Hughes et al. (in revision)
library(SMITER)
data(BMDA_1B_Comp)
data(BMDA_1B_EComp)

# Designate forward matrix (A), reconstruction target (b), and corresponding errors (Ae, be).
proxy_names <- names(bmda_1b_comp[,c(5:ncol(bmda_1b_comp))])

A <- bmda_1b_comp[,proxy_names]
Ae <- bmda_1b_ecomp[,proxy_names]
b <- bmda_1b_comp[,'Temp']
be <- rep(0.02, length(b))

# Execute SMITE Calibration with no truncation (i.e., all information retained).
SMITE <- SMITE.calib(A = A, b = b, Ae = Ae, be = be, eigenclean = ncol(A))

# Extract SMITE model parameters
x <- SMITE$x$x.mu

# Reconstruction (should be nearly identical to result$recon$bhat.mu, only minor differences due to bootstrapping)
bhat <- SMITE.recon(
  A = A,
  x = x,
  Amu = colMeans(A),
  Asd = apply(A, 2, function(x) sd(x)),
  bmu = mean(b),
  bsd = sd(b)
)

cbind(bhat, result$recon$bhat.mu)
}
